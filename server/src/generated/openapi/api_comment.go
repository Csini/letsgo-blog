/*
 * Let's go Blog API
 *
 * Application providing Blog.
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// CommentAPIController binds http requests to an api service and writes the service results to the http response
type CommentAPIController struct {
	service      CommentAPIServicer
	errorHandler ErrorHandler
}

// CommentAPIOption for how the controller is set up.
type CommentAPIOption func(*CommentAPIController)

// WithCommentAPIErrorHandler inject ErrorHandler into controller
func WithCommentAPIErrorHandler(h ErrorHandler) CommentAPIOption {
	return func(c *CommentAPIController) {
		c.errorHandler = h
	}
}

// NewCommentAPIController creates a default api controller
func NewCommentAPIController(s CommentAPIServicer, opts ...CommentAPIOption) Router {
	controller := &CommentAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the CommentAPIController
func (c *CommentAPIController) Routes() Routes {
	return Routes{
		"PostComment": Route{
			strings.ToUpper("Post"),
			"/letsgo/v1/api/comment/{blogid}",
			c.PostComment,
		},
	}
}

// PostComment - Saves a new Comment
func (c *CommentAPIController) PostComment(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	blogidParam, err := parseNumericParameter[int32](
		params["blogid"],
		WithRequire[int32](parseInt32),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	authorizationParam := r.Header.Get("Authorization")
	commentRequestParam := CommentRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&commentRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertCommentRequestRequired(commentRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertCommentRequestConstraints(commentRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.PostComment(r.Context(), blogidParam, authorizationParam, commentRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
