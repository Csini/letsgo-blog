/*
 * Let's go Blog API
 *
 * Application providing Blog.
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package impl

import (
	"context"
	//"net/http"

	log "github.com/sirupsen/logrus"

	"entity"
	openapi "generated/openapi"

	"gorm.io/gorm"
	utils_db "utils/db"

	model "impl/model"

	//"slices"
	//"fmt"
	"time"
)

// StatisticsAPIService is a service that implements the logic for the StatisticsAPIServicer
// This service should implement the business logic for every endpoint for the StatisticsAPI API.
// Include any external packages or services that will be required by this service.
type StatisticsAPIService struct {
}

// NewStatisticsAPIService creates a default api service
func NewStatisticsAPIService() openapi.StatisticsAPIServicer {
	return &StatisticsAPIService{}
}

// GetStatistics - Provides statistics about user activity
func (s *StatisticsAPIService) GetStatistics(ctx context.Context, days int32) (openapi.ImplResponse, error) {

	log.WithFields(log.Fields{
		"days": days,
	}).Info("Statistics called")

	var gormconfig = &gorm.Config{

		PrepareStmt: true,
	}

	db, err := utils_db.OpenConnection(gormconfig)

	if err != nil {
		return openapi.Response(500, nil), err
	}

	today := time.Now()

	//midnight
	beforeThisDate := time.Date(today.Year(), today.Month(), today.Day()-int(days), 0, 0, 0, 0, today.Location())

	log.WithFields(log.Fields{
		"beforeThisDate": beforeThisDate,
	}).Info("calculated")

	var statistics openapi.StatisticsResponse
	statistics.BeforeThisDate = beforeThisDate

	blog_results, err := getBlogResults(db, beforeThisDate)
	if err != nil {
		return openapi.Response(500, nil), err
	}

	comment_results, err := getCommentResults(db, beforeThisDate)
	if err != nil {
		return openapi.Response(500, nil), err
	}

	var users []entity.User
	// Get all records
	result := db.Find(&users)
	// SELECT * FROM users;
	//result.RowsAffected // returns found records count, equals `len(users)`
	//result.Error        // returns error
	if result.Error != nil {
		return openapi.Response(500, nil), result.Error
	}

	//merge the two results with list of all users and send back as a list of Statistic
	items := HandleUsers(users, blog_results, comment_results)

	statistics.Items = items
	statistics.Size = int32(len(items))

	return openapi.Response(200, statistics), nil

}

func HandleUsers(users []entity.User, blog_results []model.CustomRawResult, comment_results []model.CustomRawResult) []openapi.Statistic {

	var items []openapi.Statistic

	// using for loop
	for _, element := range users {

		//log.Debug(element.Username)

		var amountBlog int32
		var amountComment int32

		for _, blog_result := range blog_results {
			if blog_result.Username == element.Username {
				log.WithFields(log.Fields{
					"blog_result.amount":   blog_result.Amount,
					"blog_result.username": blog_result.Username,
				}).Info(element.Username)
				amountBlog = blog_result.Amount
				break
			}
		}

		for _, comment_result := range comment_results {
			if comment_result.Username == element.Username {
				log.WithFields(log.Fields{
					"comment_result.amount":   comment_result.Amount,
					"comment_result.username": comment_result.Username,
				}).Info(element.Username)
				amountComment = comment_result.Amount
				break
			}
		}

		amountObject := openapi.Amount{Blog: amountBlog, Comment: amountComment}
		statistic := openapi.Statistic{Userid: element.Username, Amount: amountObject}

		items = append(items, statistic)
	}

	return items
}

func getBlogResults(db *gorm.DB, beforeThisDate time.Time) ([]model.CustomRawResult, error) {
	var blog_results []model.CustomRawResult

	blog_rows, err := db.Raw("select user_id as username, count(id) as amount from blogs WHERE created_at > ? group by user_id", beforeThisDate).Rows()
	defer blog_rows.Close()
	for blog_rows.Next() {
		var username string
		var amount int32
		blog_rows.Scan(&username, &amount)

		blog_row := model.CustomRawResult{Username: username, Amount: amount}
		blog_results = append(blog_results,
			blog_row)
	}
	if err != nil {
		return nil, err
	}
	log.Debug(blog_results)
	return blog_results, nil

}

func getCommentResults(db *gorm.DB, beforeThisDate time.Time) ([]model.CustomRawResult, error) {
	var comment_results []model.CustomRawResult

	comment_rows, err := db.Raw("select user_id as username, count(id) as amount from comments WHERE created_at > ? group by user_id", beforeThisDate).Rows()
	defer comment_rows.Close()
	for comment_rows.Next() {
		var username string
		var amount int32
		comment_rows.Scan(&username, &amount)

		comment_row := model.CustomRawResult{Username: username, Amount: amount}
		comment_results = append(comment_results,
			comment_row)
	}
	if err != nil {
		return nil, err
	}
	log.Debug(comment_results)
	return comment_results, nil
}
