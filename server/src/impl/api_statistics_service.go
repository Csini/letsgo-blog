/*
 * Let's go Blog API
 *
 * Application providing Blog.
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package impl

import (
	"context"
	"errors"
	openapi "generated/openapi"
	"net/http"

	log "github.com/sirupsen/logrus"

	"entity"
	"gorm.io/driver/sqlite"
	"gorm.io/gorm"
)

// StatisticsAPIService is a service that implements the logic for the StatisticsAPIServicer
// This service should implement the business logic for every endpoint for the StatisticsAPI API.
// Include any external packages or services that will be required by this service.
type StatisticsAPIService struct {
}

// NewStatisticsAPIService creates a default api service
func NewStatisticsAPIService() openapi.StatisticsAPIServicer {
	return &StatisticsAPIService{}
}

// GetStatistics - Provides statistics about user activity
func (s *StatisticsAPIService) GetStatistics(ctx context.Context, days int32) (openapi.ImplResponse, error) {
	// TODO - update GetStatistics with the required logic for this service method.
	// Add api_statistics_service.go to the .openapi-generator-ignore to avoid overwriting this service implementation when updating open api generation.

	// TODO: Uncomment the next line to return response Response(200, StatisticsResponse{}) or use other options such as http.Ok ...
	// return Response(200, StatisticsResponse{}), nil

	// TODO: Uncomment the next line to return response Response(400, Error{}) or use other options such as http.Ok ...
	// return Response(400, Error{}), nil

	// TODO: Uncomment the next line to return response Response(500, Error{}) or use other options such as http.Ok ...
	// return Response(500, Error{}), nil

	// TODO: Uncomment the next line to return response Response(0, Error{}) or use other options such as http.Ok ...
	// return Response(0, Error{}), nil

	log.WithFields(log.Fields{
		"days": days,
	}).Info("Statistics called - 2222")

	db, err := gorm.Open(sqlite.Open("test.db"), &gorm.Config{})
	if err != nil {
		log.Error(err)
		return openapi.Response(500, nil), errors.New("GetStatistics failed to connect database")
	} else {
		log.Info("yuhuuuuu")
	}

	// Read
	var user entity.User
	db.First(&user, "Username = ?", "admin") // find

	log.WithFields(log.Fields{
		"user": user,
	}).Info("User")

	return openapi.Response(http.StatusNotImplemented, nil), errors.New("GetStatistics method not implemented")
}
