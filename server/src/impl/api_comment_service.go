/*
 * Let's go Blog API
 *
 * Application providing Blog.
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package impl

import (
	"context"
	"errors"
	//"net/http"

	log "github.com/sirupsen/logrus"

	openapi "generated/openapi"

	"config"
	"entity"
	"gorm.io/driver/sqlite"
	"gorm.io/gorm"

	"github.com/golang-jwt/jwt"
)

// CommentAPIService is a service that implements the logic for the CommentAPIServicer
// This service should implement the business logic for every endpoint for the CommentAPI API.
// Include any external packages or services that will be required by this service.
type CommentAPIService struct {
}

// NewCommentAPIService creates a default api service
func NewCommentAPIService() openapi.CommentAPIServicer {
	return &CommentAPIService{}
}

// PostComment - Saves a new Comment
func (s *CommentAPIService) PostComment(ctx context.Context, blogid int32, authorization string, commentRequest openapi.CommentRequest) (openapi.ImplResponse, error) {

	//TODO check jwt token in authorization and get userid from it
	//authorization = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhdXRob3JpemVkIjp0cnVlLCJleHAiOiIyMDI0LTAyLTEzVDE5OjI1OjM4LjQxMTA4NDgzMyswMTowMCIsInVzZXIiOiJ0ZXN0dXNlciJ9.Hb-lMGdLvAdA6x3lRSXiiQG1GcslOJWxaTmevuO6DPk"

	log.Info(authorization)

	//if !token.isValid(){
	if authorization == "" {
		return openapi.Response(401, nil), errors.New("PostComment not autherized")
	}

	userid, userid_err := getUsernameFromToken(authorization)

	if userid_err != nil {
		return openapi.Response(401, nil), userid_err //errors.New("PostComment not autherized")
	}

	db, err := gorm.Open(sqlite.Open(config.GetDbName()), &gorm.Config{

		PrepareStmt: false,
	})
	if err != nil {
		log.Error(err)
		return openapi.Response(500, nil), errors.New("PostComment failed to connect database")
	} else {
		log.Info("yuhuuuuu")
		//sqlite
		db.Exec("PRAGMA foreign_keys = ON")
	}

	//check blog user_id == comment userid

	var blog entity.Blog
	// Get
	db.First(&blog, blogid)

	if blog.User_ID != userid {
		return openapi.Response(401, nil), errors.New("user not autherized to this blog")
	}

	// create commet
	comment := entity.Comment{Blog_ID: int(blogid), Content: commentRequest.Content, User_ID: userid}

	//result :=
	db.Create(&comment) // pass pointer of data to Create

	// returns inserted data's primary key
	return openapi.Response(200, comment.ID), nil
}
func getUsernameFromToken(authorization string) (string, error) {

	claims := jwt.MapClaims{}
	token, err := jwt.ParseWithClaims(authorization, claims, func(token *jwt.Token) (interface{}, error) {
		return config.GetSecretKey(), nil
	})

	if err != nil {
		log.Info(token)
		return "", err //errors.New("PostComment not autherized")
	}
	if token.Valid {
		username := claims["user"].(string)
		return username, nil
	}

	return "", errors.New("unable to extract UsernameFromToken")
}
