/*
 * Let's go Blog API
 *
 * Application providing Blog.
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package impl

import (
	"context"
	"errors"
	//"net/http"

	log "github.com/sirupsen/logrus"

	openapi "generated/openapi"

	"config"
	"entity"
	"gorm.io/driver/sqlite"
	"gorm.io/gorm"
)

// CommentAPIService is a service that implements the logic for the CommentAPIServicer
// This service should implement the business logic for every endpoint for the CommentAPI API.
// Include any external packages or services that will be required by this service.
type CommentAPIService struct {
}

// NewCommentAPIService creates a default api service
func NewCommentAPIService() openapi.CommentAPIServicer {
	return &CommentAPIService{}
}

// PostComment - Saves a new Comment
func (s *CommentAPIService) PostComment(ctx context.Context, blogid int32, authorization string, commentRequest openapi.CommentRequest) (openapi.ImplResponse, error) {
	// TODO - update PostComment with the required logic for this service method.
	// Add api_comment_service.go to the .openapi-generator-ignore to avoid overwriting this service implementation when updating open api generation.

	// TODO: Uncomment the next line to return response Response(200, int32{}) or use other options such as http.Ok ...
	// return Response(200, int32{}), nil

	// TODO: Uncomment the next line to return response Response(400, Error{}) or use other options such as http.Ok ...
	// return Response(400, Error{}), nil

	// TODO: Uncomment the next line to return response Response(401, Error{}) or use other options such as http.Ok ...
	// return Response(401, Error{}), nil

	// TODO: Uncomment the next line to return response Response(500, Error{}) or use other options such as http.Ok ...
	// return Response(500, Error{}), nil

	//TODO check jwt token in authorization and get userid from it
	userid := "testuser"
	//if !token.isValid(){
	if authorization != "" {
		return openapi.Response(401, nil), errors.New("PostComment not autherized")
	}

	db, err := gorm.Open(sqlite.Open(config.DB_NAME), &gorm.Config{

		PrepareStmt: false,
	})
	if err != nil {
		log.Error(err)
		return openapi.Response(500, nil), errors.New("PostComment failed to connect database")
	} else {
		log.Info("yuhuuuuu")
	}

	//check blog user_id == comment userid

	var blog entity.Blog
	// Get
	db.First(&blog, blogid)

	if blog.User_ID != userid {
		return openapi.Response(401, nil), errors.New("PostComment not autherized to this blog")
	}

	// create commet
	comment := entity.Comment{Blog_ID: int(blogid), Content: commentRequest.Content, User_ID: userid}

	//result :=
	db.Create(&comment) // pass pointer of data to Create

	// returns inserted data's primary key
	return openapi.Response(200, comment.ID), nil
	//result.Error        // returns error
	//result.RowsAffected // returns inserted records count

	//return openapi.Response(http.StatusNotImplemented, nil), errors.New("PostComment method not implemented")
}
